{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'text-black',
    'body-font',
  ]
%}
{% set card_info_section_title = content.field_info_block_title['#items'].getValue().0.value %}
{% set card_info_summary= content.field_summary['#items'].getValue().0.value %}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="container px-5 py-20 mx-auto">
        <div class="flex flex-col">
          <div class="h-1 bg-black rounded overflow-hidden">
            <div class="w-40 h-full bg-orange-500"></div>
          </div>
          <div class="flex flex-wrap sm:flex-row flex-col py-6 mb-12">
            <h1 class="sm:w-2/5 text-gray-900 font-medium title-font text-4xl mb-2 sm:mb-0">{{ card_info_section_title|t }}</h1>
            <p class="sm:w-3/5 leading-relaxed text-base sm:pl-10 pl-0">{{ card_info_summary|t|striptags }}</p>
          </div>
        </div>
      </div>  
        <div class="flex flex-wrap sm:-m-4 -mx-4 -mb-10 -mt-4 md:space-y-0 space-y-6 px-40">
          {% for key, value in content.field_cards['#items'].getValue %}
            {% set info_title = content.field_cards[key]['#paragraph'].field_info_card_title.getValue().0.value %}
            {% set info_content = content.field_cards[key]['#paragraph'].field_info_card_description.getValue().0.value %}
            {% set info_icon = content.field_cards[key]['#paragraph'].field_info_card_icon.getValue().0.value %}
            <div class="p-4 md:w-1/5 flex flex-col text-center items-center">
              <div class="w-20 h-20 inline-flex items-center justify-center rounded-full bg-orange-500 text-indigo-500 mb-5 flex-shrink-0">
                <svg fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" class="text-indigo-500 w-10 h-10 flex-shrink-0" viewBox="0 0 24 24">
                  <path d="M22 11.08V12a10 10 0 11-5.93-9.14"></path>
                  <path d="M22 4L12 14.01l-3-3"></path>
                </svg>
              </div>
              <div class="flex-grow">
                <h2 class="text-gray-900 text-lg title-font font-medium mb-3"> {{ info_title }} </h2>
                <p class="leading-relaxed text-base"> {{ info_content }} </p>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>  
    {% endblock %}
  </section>
{% endblock paragraph %}
